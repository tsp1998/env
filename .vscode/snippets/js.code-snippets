{
	"consoleLog": {
		"prefix": [
			"clg"
		],
		"body": "console.log(${1:object})"
	},
	"consoleLogObject": {
		"prefix": "clo",
		"body": "console.log(`${1:object}`, ${1:object})"
	},
	"consoleWarn": {
		"prefix": [
			"clw"
		],
		"body": "console.warn(${1:object})"
	},
	"consoleWarnObject": {
		"prefix": "clwo",
		"body": "console.warn(`${1:object}`, ${1:object})"
	},
	"jsFunction": {
		"prefix": "fun",
		"body": [
			"function $1(params) {",
			"\t$2",
			"}"
		]
	},
	"const destructure": {
		"prefix": "condes",
		"body": [
			"const { $2 } = $1;"
		]
	},
	"let destructure": {
		"prefix": "letdes",
		"body": [
			"let { $2 } = $1;"
		]
	},
	"jsGetById": {
		"prefix": "dgi",
		"body": "document.getElementById('$1')"
	},
	"promise": {
		"prefix": [
			"promise",
			"newPromise"
		],
		"body": [
			"new Promise((resolve, reject) => {",
			"\t$1",
			"})"
		]
	},
	"sti": {
		"prefix": "sti",
		"body": "setInterval(() => {$3}, ${1:intervalTime})"
	},
	"sto": {
		"prefix": "sto",
		"body": "setTimeout(() => {$2}, ${1:delayTime})"
	},
	"loginfo": {
		"prefix": "loginfo",
		"body": "logger.info(`${1:message}`)"
	},
	"logdebug": {
		"prefix": "logdebug",
		"body": "logger.debug(`${1:message}`)"
	},
	"logerror": {
		"prefix": "logerror",
		"body": "logger.error(`${1:message}`)"
	},
	"logwarn": {
		"prefix": "logwarn",
		"body": "logger.warn(`${1:message}`)"
	},
	"loginfoobj": {
		"prefix": "loginfoobj",
		"body": "logger.info({ message: '$1' })"
	},
	"logdebugobj": {
		"prefix": "logdebugobj",
		"body": "logger.debug({ message: '$1' })"
	},
	"logerrorobj": {
		"prefix": "logerrorobj",
		"body": "logger.error({ message: '$1' })"
	},
	"logwarnobj": {
		"prefix": "logwarnobj",
		"body": "logger.warn({ message: '$1' })"
	},
	"promise-delay": {
		"prefix": ["stoprom", "promsto"],
		"body": "await new Promise(resolve  => setTimeout(resolve, ${1:1000}))"
	}
}