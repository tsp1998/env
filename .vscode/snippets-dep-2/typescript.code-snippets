{
	"consoleLog": {
		"prefix": [
			"clg"
		],
		"body": "console.log(${1:object})"
	},
	"consoleLogObject": {
		"prefix": "clo",
		"body": "console.log(`${1:object}`, ${1:object})"
	},
	"consoleTimeBoth": {
		"prefix": "clt",
		"body": [
			"console.time(`${1:name}`)\n$2",
			"console.timeEnd(`${1:name}`)"
		]
	},
	"createElements": {
		"prefix": "ce",
		"body": "$createElements($1, $2)"
	},
	"jsFunction": {
		"prefix": "fun",
		"body": [
			"function $1(params) {",
			"\t$2",
			"}"
		]
	},
	"promise": {
		"prefix": [
			"promise",
			"newPromise"
		],
		"body": "new Promise((resolve, reject) => {$1})"
	},
	"sti": {
		"prefix": "sti",
		"body": "setInterval(() => {$3}, ${1:intervalTime})"
	},
	"sto": {
		"prefix": "sto",
		"body": "setTimeout(() => {$2}, ${1:delayTime})"
	},
	"promise-delay": {
		"prefix": [
			"stoprom",
			"promsto"
		],
		"body": "await new Promise(resolve  => setTimeout(resolve, ${1:1000}))"
	},
	"import": {
		"prefix": "im",
		"body": "import '${1:module}'"
	},
	"importFunction": {
		"prefix": "imf",
		"body": "import('${1:module}')"
	},
	"import module": {
		"prefix": "imp",
		"body": "import ${2:moduleName} from '${1:module}'"
	},
	"import named modules": {
		"prefix": "imd",
		"body": "import { $2 } from '${1:module}'"
	},
	"import module as": {
		"prefix": "impas",
		"body": "import * as ${2:moduleName} from '${1:module}'"
	},
	"import named modules as": {
		"prefix": "imdas",
		"body": "import { $2 as $3 } from '${1:module}'"
	},
	"import module with function": {
		"prefix": "impf",
		"body": "const { default: ${2:moduleName} } = await import('${1:module}')"
	},
	"import named modules function": {
		"prefix": "imdf",
		"body": "const { ${2:moduleName} } = await import('${1:module}')"
	},
	"export": {
		"prefix": "ex",
		"body": "export "
	},
	"export default module": {
		"prefix": "exd",
		"body": "export default "
	},
	"export default module from": {
		"prefix": "exdfrom",
		"body": "export { default as ${2:moduleName} } from '${1:module}'"
	},
	"export const": {
		"prefix": "exc",
		"body": "export const "
	},
	"destructure object": {
		"prefix": "dob",
		"body": "const { ${2:propName} } = ${1:objectToDescruct}"
	},
	"destructure array": {
		"prefix": "dar",
		"body": "const [${2:propName}] = ${1:arrayToDescruct}"
	},
	"global-types": {
		"prefix": [
			"globalTypes",
			"typesGlobal"
		],
		"body": [
			"declare global {",
			"\tnamespace \\$${1:NamespaceName} {\n\t\t$2\n\t}",
			"}",
			"export {}"
		]
	},
	"fn simple": {
		"prefix": "fnsimple",
		"body": [
			"const ${1:fnName} = async <U>(${2:${3:paramName}S: \\$fn.FnP<${4:ParamType}>}): \\$fn.FnRRPromise<U> => {",
			"\t/* please pass param as [param] if it's object */",
			"\ttype O = \\$fn.FnPO<${4:ParamType}>",
			"\tconst results: \\$fn.FnPO<U> = {}",
			"\tconst es: \\$fn.FnPO<\\$Error> = {}",
			"\tconst isArray = Array.isArray(${3:paramName}S)",
			"\tif (!isArray && typeof ${3:paramName}S !== 'object') {",
			"\t\t${3:paramName}S = [${3:paramName}S]",
			"\t}",
			"\tconst keys = Object.keys(${3:paramName}S)",
			"\t/* initial setup done */\n",
			"\tfor (let i = 0; i < keys.length; i++) {",
			"\t\tconst key = keys[i]",
			"\t\ttry {",
			"\t\t\tconst ${3:paramName} = (${3:paramName}S as O)[key]",
			"\t\t\tresults[key] = $5",
			"\t\t} catch (error) {",
			"\t\t\tes[key] = \\$fns.errorToObject(error as Error)",
			"\t\t}",
			"\t}\n",
			"\treturn { results, es }",
			"}\n",
			"// export default ${1:fnName}"
		]
	},
	"fn advance": {
		"prefix": "fn",
		"body": [
			"const ${1:fnName} = async <U>(${2:${3:paramName}S: \\$fn.FnP<${4:ParamType}>}, value?: ${4:ParamType}, \\$do: Partial<{\n\tkeysAreKeys: boolean\n}> = {}): \\$fn.FnRRPromise<U> => {",
			"\t/* please pass param as [param] if it's object */",
			"\ttype O = \\$fn.FnPO<${4:ParamType}>",
			"\tconst results: \\$fn.FnPO<U> = {}",
			"\tconst es: \\$fn.FnPO<\\$Error> = {}",
			"\tconst isArray = Array.isArray(${3:paramName}S)",
			"\tif (!isArray && typeof ${3:paramName}S !== 'object') {",
			"\t\t${3:paramName}S = [${3:paramName}S]",
			"\t}",
			"\tconst { keysAreKeys = false } = \\$do",
			"\tconst keys = keysAreKeys ? Object.keys(${3:paramName}S) : Object.values(${3:paramName}S)",
			"\t/* initial setup done */\n",
			"\tfor (let i = 0; i < keys.length; i++) {",
			"\t\tconst key = keys[i]",
			"\t\ttry {",
			"\t\t\tconst ${3:paramName} = typeof (${3:paramName}S as O)[key] === 'undefined' ? value : (${3:paramName}S as O)[key]",
			"\t\t\tresults[key] = $5",
			"\t\t} catch (error) {",
			"\t\t\tes[key] = \\$fns.errorToObject(error as Error)",
			"\t\t}",
			"\t}\n",
			"\treturn { results, es }",
			"}\n",
			"// export default ${1:fnName}"
		]
	},
	"sequential-parallel-helper": {
		"prefix": [
			"promisesp"
		],
		"body": [
			"const { es: _es, results: _results } = await sequentialParallelHelper<U>(results as \\$fn.FnPAO<Promise<unknown>>, { keys, parallel })",
			"addKeysIfNotExist(es, _es)",
			"return { results: _results, es: _es }"
		]
	},
	"fn refactored return": {
		"prefix": "fnrr",
		"body": "return { results: _results, es: _es }"
	},
	"main function": {
		"prefix": "mainfn",
		"body": [
			"const main = async () => {\n\t$1\n}\n",
			"main()"
		]
	},
	"is array": {
		"prefix": "isArr",
		"body": [
			"const isArray = Array.isArray(${1:varName})",
			"if (!isArray) {",
			"\t${1:varName} = [${1:varName}] as ${2:any}[]",
			"}"
		]
	},
	"tsptest import": {
		"prefix": "imptsptest",
		"body": [
			"import * as tsptest from '../$1tests/tsptest'",
		]
	},
	"tsptest": {
		"prefix": "tsptest",
		"body": [
			"import * as tsptest from '../$1tests/tsptest'\n",
			"tsptest.tests.${2:testName} = () => {\n\t$3\n}\n",
			"tsptest.runTests()",
		]
	},
	"import start end block": {
		"prefix": "imse",
		"body": "/* imports start */\n$1\n/* imports end */"
	}
}